{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "view-mode-teaser", and
 *     full: "view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 */
#}
{%
  set classes = [
  'node',
  'node--type-' ~ node.bundle|clean_class,
  node.isPromoted() ? 'node--promoted',
  node.isSticky() ? 'node--sticky',
  not node.isPublished() ? 'node--unpublished',
  view_mode ? 'view-mode-' ~ view_mode|clean_class,
  'clearfix',
  'universal-teaser'
]
%}
{% set mood_image = content.field_mood_image|render|trim is not empty %}
{% set profile_image = content.field_portrait|render|trim is not empty %}
{% set sub_type = content.field_sub_type|render|trim is not empty %}
{% set column = content.field_column|render|trim is not empty %}
{% set wrapper_tag = 'article' %}

{{ attach_library('classy/node') }}
 {% block content_wrapper %}
<{{ wrapper_tag }}{{ attributes.addClass(classes) }}>
  <div class="teaser--top">
    {% if mood_image %}
      {{ content.field_mood_image }}
    {% elseif profile_image %}
      {{ content.field_portrait }}
    {% endif %}
  </div>
  <div class="teaser--body">
    {{ title_prefix }}
    {% if label and not page %}
      {% if column %}
        <div class="article-column field__label" id="st-{{ node.id }}">{{ content.field_column }}</div>
        <h3{{ title_attributes.addClass('teaser') }} id="h-{{ node.id }}">
          <a href="{{ url }}" rel="bookmark" aria-labelledby="st-{{ node.id }} h-{{ node.id }}">{{ label }}</a>
        </h3>
      {% elseif sub_type %}
        <div class="sub-type field__label" id="st-{{ node.id }}">{{ content.field_sub_type }}</div>
        <h3{{ title_attributes.addClass('teaser') }} id="h-{{ node.id }}">
          <a href="{{ url }}" rel="bookmark" aria-labelledby="st-{{ node.id }} h-{{ node.id }}">{{ label }}</a>
        </h3>
      {% else %}
        <h3{{ title_attributes.addClass('teaser') }}>
          <a href="{{ url }}" rel="bookmark">{{ label }}</a>
        </h3>
      {% endif %}
    {% endif %}
    {{ title_suffix }}

    <div{{ content_attributes.addClass('node__content') }}>
      {{ content | without('field_mood_image', 'field_sub_type', 'field_column', 'field_author', 'field_portrait', 'field_date_published') }}
    </div>
  </div>
  {% if content.field_author|render|trim or content.field_publication_date|render|trim  %}
  <footer class="teaser--footer">
    <div class="teaser--author">
      {{ content.field_author }}
    </div>
    <div class="teaser--date">
      {% if content.field_date_published %}
        {{ content.field_date_published }}
      {% endif %}
    </div>
  </footer>
  {% endif %}
</{{ wrapper_tag }}>
{% endblock %}
