<?php

/**
 * @file
 * Functions to support theming in the OpenCulturas Base theme.
 */

use Drupal\Core\Entity\FieldableEntityInterface;

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function openculturas_base_preprocess_html(&$variables) {
  // Set entity type for adding a class to the body.
  foreach (\Drupal::routeMatch()->getParameters()->all() as $parameter) {
    if ($parameter instanceof FieldableEntityInterface) {
      $variables['entity_type_id'] = $parameter->getEntityTypeId();
      break;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for node.html.twig.
 */
function openculturas_base_preprocess_node(&$variables) {
  $node = $variables['node'];

  // Hide all fields used by seperated blocks in different areas of the theme on full viewmode.
  // We don't hide them on other viewmodes because they could be needed there.
  if ($variables["view_mode"] === 'full') {
    $hidden_fields = [
      'field_subtitle',
      'field_mood_image',
      'field_portrait',
      'field_premiere'
    ];
    foreach ($hidden_fields as $name) {
      if (isset($variables['content'][$name])) {
        $variables["content"][$name]['#access'] = FALSE;
      }
    }
  }

  // Override details title with user-set value and hide original field rendering.
  if ($node->hasField('field_reference_title')
    && !$node->get('field_reference_title')->isEmpty()
    && isset($variables['elements']['#fieldgroups']['group_featuring'])) {
    $reference_title = $node->get('field_reference_title')->value;
    $variables['elements']['#fieldgroups']['group_featuring']->label = $reference_title;
    $variables['content']['field_reference_title']['#access'] = FALSE;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Adds a class depending on referenced entity to links of entity_reference fields.
 */
function openculturas_base_preprocess_field(array &$variables) {
  if ($variables['field_type'] === 'entity_reference') {
    foreach ($variables["items"] as $item) {
      if (isset($item['content']['#options']['entity_type']) && isset($item['content']['#options']['entity'])) {
        $item['attributes']->addClass('reference--' . $item["content"]["#options"]["entity_type"]);
        $item['attributes']->addClass('reference--' . $item["content"]["#options"]["entity_type"] . '--' . $item["content"]["#options"]["entity"]->bundle());
      }
    }
  }
}

/**
 * Implements hook_theme_suggestions_taxonomy_term_alter().
 */
function openculturas_base_theme_suggestions_taxonomy_term_alter(array &$suggestions, array $variables) {
  /** @var \Drupal\taxonomy\TermInterface $term */
  $term = $variables['elements']['#taxonomy_term'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
  // Add view mode theme suggestions.
  $suggestions[] = 'taxonomy_term__' . $sanitized_view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->id() . '__' . $sanitized_view_mode;
}
