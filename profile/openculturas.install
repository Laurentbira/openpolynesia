<?php

/**
 * @file
 * Install, update and uninstall functions for the standard installation profile.
 */

declare(strict_types = 1);

use Drupal\Core\Config\Entity\ConfigEntityType;
use Drupal\Core\Entity\EntityDeleteForm;
use Drupal\Core\Field\FieldConfigInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\Utility\UpdateException;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\FieldStorageConfigInterface;
use Drupal\node\NodeInterface;
use Drupal\openculturas_custom\EcaNotificationRecipientListBuilder;
use Drupal\openculturas_custom\Form\EcaNotificationRecipientForm;
use Drupal\user\Entity\Role;
use Drupal\user\RoleInterface;

/**
 * Implements hook_install_tasks().
 */
function openculturas_install_tasks(): array {
  return [
    'openculturas_install_content' => [
      'display_name' => t('Install default content'),
      'type' => 'normal',
    ],
  ];
}

/**
 * Callback function to install default profile content.
 *
 * @see openculturas_install_tasks()
 */
function openculturas_install_content(): void {
  $configFactory = \Drupal::configFactory();

  /** @var \Drupal\Core\Extension\ModuleInstallerInterface $module_installer */
  $module_installer = \Drupal::service('module_installer');
  // We only want to import the content,
  // then we do not need the module anymore.
  $module_installer->install(['openculturas_content']);
  $module_installer->uninstall(['default_content', 'openculturas_content']);

  $config = $configFactory->getEditable('system.site');

  // Do not set anything, when installed with existing config.
  if ($config->get('uuid') === '4e1801fb-85a2-40f3-8ad4-11f952d5e819') {
    return;
  }

  /** @var \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository */
  $entityRepository = \Drupal::service('entity.repository');

  /** @var \Drupal\node\NodeInterface|null $node */
  $node = $entityRepository->loadEntityByUuid('node', 'f971a5cd-960b-40ee-b059-173c366231af');
  // File: profile/modules/custom/openculturas_content/content/node/f971a5cd-960b-40ee-b059-173c366231af.yml.
  if ($node instanceof NodeInterface) {
    $config->set('page.404', '/node/' . $node->id());
  }
  /** @var \Drupal\node\NodeInterface|null $node */
  $node = $entityRepository->loadEntityByUuid('node', '34e5758c-997b-45cd-91ed-66a694a5fdd3');
  // File: profile/modules/custom/openculturas_content/content/node/34e5758c-997b-45cd-91ed-66a694a5fdd3.yml.
  if ($node instanceof NodeInterface) {
    $config->set('page.403', '/node/' . $node->id());
  }

  /** @var \Drupal\node\NodeInterface|null $node */
  $node = $entityRepository->loadEntityByUuid('node', '9af42cc9-30a8-46a4-9432-dfcde34cd259');
  // File: profile/modules/custom/openculturas_content/content/node/9af42cc9-30a8-46a4-9432-dfcde34cd259.yml.
  if ($node instanceof NodeInterface) {
    $config->set('page.front', '/node/' . $node->id());
  }
  $config->save();

  // Fix path to marker, when installed as a dependency.
  if (file_exists(DRUPAL_ROOT . '/profiles/contrib/openculturas-distribution/profile/themes/openculturas_base/images/map_marker.svg')) {
    $config = $configFactory->getEditable('views.view.locations');
    $config->set('display.default.display_options.style.options.icon.iconUrl', '/profiles/contrib/openculturas-distribution/profile/themes/openculturas_base/images/map_marker.svg');
    $config->save();

    $config = $configFactory->getEditable('views.view.related_date');
    $config->set('display.upcoming_dates_map.display_options.style.options.icon.iconUrl', '/profiles/contrib/openculturas-distribution/profile/themes/openculturas_base/images/map_marker.svg');
    $config->save();

    $config = $configFactory->getEditable('core.entity_view_display.paragraph.address_data.default');
    $config->set('content.field_address_location.settings.icon.iconUrl', '/profiles/contrib/openculturas-distribution/profile/themes/openculturas_base/images/map_marker.svg');
    $config->save();

    $config = $configFactory->getEditable('core.entity_view_display.paragraph.address_data.map');
    $config->set('content.field_address_location.settings.icon.iconUrl', '/profiles/contrib/openculturas-distribution/profile/themes/openculturas_base/images/map_marker.svg');
    $config->save();
  }
  if (file_exists(DRUPAL_ROOT . '/profiles/contrib/openculturas-distribution/profile/themes/openculturas_base/favicons/drupal-oc-icon.png')) {
    $config = $configFactory->getEditable('gin.settings');
    $config->set('favicon.path', '/profiles/contrib/openculturas-distribution/profile/themes/openculturas_base/favicons/drupal-oc-icon.png');
    $config->save();
  }

}

/**
 * Install update_helper_checklist.
 */
function openculturas_update_9001(): void {
  /** @var \Drupal\Core\Extension\ModuleInstallerInterface $moduleInstaller */
  $moduleInstaller = \Drupal::service('module_installer');
  $moduleInstaller->install(['update_helper_checklist']);
  $configFactory = \Drupal::configFactory();
  $config = $configFactory->getEditable('formtips.settings');
  if (!$config->isNew()) {
    $new_selectors = '';
    $current_selectors = $config->get('formtips_selectors');
    if (is_string($current_selectors)) {
      $current_selectors = explode("\r\n", $current_selectors);
      $current_selectors[] = '.checklistapi-checklist-form .form-item__description';
      $new_selectors = implode("\r\n", $current_selectors);
    }
    $config
      ->set('formtips_selectors', $new_selectors)
      ->save();
  }
}

/**
 * Fix label of the roles anonymous/authenticated.
 */
function openculturas_update_9002(): string {
  /** @var \Drupal\update_helper\Updater $updater */
  $updater = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updater->executeUpdate('openculturas', 'openculturas_update_9002');

  // Output logged messages to related channel of update execution.
  return $updater->logger()->output();
}

/**
 * Install eca.
 */
function openculturas_update_9003(): void {
  /** @var \Drupal\Core\Extension\ModuleInstallerInterface $moduleInstaller */
  $moduleInstaller = \Drupal::service('module_installer');
  $moduleInstaller->install(['eca']);
}

/**
 * Installs config entity type eca_notification_recipient.
 */
function openculturas_update_9004(): string {
  $changeList = \Drupal::entityDefinitionUpdateManager()->getChangeList();
  if (!array_key_exists('eca_notification_recipient', $changeList)) {
    return 'Skipped. The new config entity type eca_notification_recipient is already installed.';
  }
  try {
    \Drupal::entityDefinitionUpdateManager()
      ->installEntityType(new ConfigEntityType([
        'id' => 'eca_notification_recipient',
        'label' => new TranslatableMarkup('Notification recipient'),
        'label_collection' => new TranslatableMarkup('Notification recipients'),
        'label_singular' => new TranslatableMarkup('notification recipient'),
        'label_plural' => new TranslatableMarkup('notification recipients'),
        'label_count' => [
          'singular' => "@count notification recipient",
          'plural' => "@count notification recipients",
        ],
        'handlers' => [
          'list_builder' => EcaNotificationRecipientListBuilder::class,
          'form' => [
            'add' => EcaNotificationRecipientForm::class,
            'edit' => EcaNotificationRecipientForm::class,
            'delete' => EntityDeleteForm::class,
          ],
        ],
        'config_prefix' => 'eca_notification_recipient',
        'admin_permission' => 'administer eca_notification_recipient',
        'static_cache' => TRUE,
        'links' => [
          'collection' => '/admin/config/workflow/eca-notification-recipient',
          'add-form' => '/admin/config/workflow/eca-notification-recipient/add',
          'edit-form' => '/admin/config/workflow/eca-notification-recipient/{eca_notification_recipient}',
          'delete-form' => '/admin/config/workflow/eca-notification-recipient/{eca_notification_recipient}/delete',
        ],
        'entity_keys' => [
          'id' => 'id',
          'label' => 'label',
          'eca_model' => 'eca_model',
          'preferred_langcode' => 'preferred_langcode',
        ],
        'config_export' => [
          'id',
          'label',
          'eca_model',
          'preferred_langcode',
        ],
      ]));
  }
  catch (\Exception $exception) {
    throw new UpdateException($exception->getMessage());
  }
  return 'Installed the new config entity type eca_notification_recipient.';
}

/**
 * Removes deprecated allowed value of field_event_series.
 */
function openculturas_update_9005(): string {
  $updateManager = \Drupal::entityDefinitionUpdateManager();
  $field_storage_definition = $updateManager->getFieldStorageDefinition('field_event_series', 'node');
  if (!$field_storage_definition instanceof FieldStorageConfigInterface) {
    return 'Skipped. The field field_event_series is not installed.';
  }

  $field_storage_definition->setSetting('allowed_values', [
    'no' => 'No',
    'is_sub_event_of' => 'is sub-event of',
  ]);
  try {
    $updateManager->updateFieldStorageDefinition($field_storage_definition);
  }
  catch (\Exception $exception) {
    throw new UpdateException($exception->getMessage());
  }
  return 'Removed deprecated allowed value of field_event_series.';
}

/**
 * Installs admin_toolbar and admin_toolbar_tools.
 */
function openculturas_update_9200(): void {
  /** @var \Drupal\Core\Extension\ModuleInstallerInterface $moduleInstaller */
  $moduleInstaller = \Drupal::service('module_installer');
  $moduleInstaller->install(['admin_toolbar', 'admin_toolbar_tools']);
}

/**
 * Removes unused configuration from openculturas base theme settings.
 */
function openculturas_update_9301(): void {
  $changed = NULL;
  $configFactory = \Drupal::configFactory();
  $config = $configFactory->getEditable('openculturas_base.settings');
  if (!$config->isNew()) {
    $data = $config->getRawData();
    foreach (array_keys($data) as $key) {
      if (str_starts_with($key, 'color-')) {
        unset($data[$key]);
        $changed = TRUE;
      }
    }
    if ($changed) {
      $config->setData($data);
      $config->save();
    }
  }
}

/**
 * Installs the view mode teaser_unified.
 */
function openculturas_update_9302(): string {
  /** @var \Drupal\update_helper\Updater $updater */
  $updater = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updater->executeUpdate('openculturas', 'openculturas_update_9302');

  // Output logged messages to related channel of update execution.
  return $updater->logger()->output();
}

/**
 * Installs the vocabularies page_type, location_type, event_type and article_type.
 */
function openculturas_update_9303(): string {
  /** @var \Drupal\update_helper\Updater $updater */
  $updater = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updater->executeUpdate('openculturas', 'openculturas_update_9303');
  /** @var \Drupal\user\RoleInterface|null $role */
  $role = Role::load('oc_admin');
  if ($role instanceof RoleInterface) {
    $perms = [
      'create terms in article_type',
      'delete terms in article_type',
      'edit terms in article_type',
      'translate article_type taxonomy_term',
    ];
    foreach ($perms as $perm) {
      $role->grantPermission($perm);
    }
    $role->save();
  }
  // Output logged messages to related channel of update execution.
  return $updater->logger()->output();
}

/**
 * Installs the new field sub_type.
 */
function openculturas_update_9304(): string {
  /** @var \Drupal\update_helper\Updater $updater */
  $updater = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updater->executeUpdate('openculturas', 'openculturas_update_9304');

  // Output logged messages to related channel of update execution.
  return $updater->logger()->output();
}

/**
 * Installs paragraph download.
 */
function openculturas_update_9305(): string {
  /** @var \Drupal\update_helper\Updater $updater */
  $updater = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updater->executeUpdate('openculturas', 'openculturas_update_9305');

  $bundles = ['page', 'faq', 'article'];
  foreach ($bundles as $bundle) {
    /** @var \Drupal\Core\Field\FieldConfigInterface|null $field */
    $field = FieldConfig::loadByName('node', $bundle, 'field_content_paragraphs');
    if (!$field instanceof FieldConfigInterface) {
      continue;
    }
    $handler_settings = $field->getSetting('handler_settings');
    if (!isset($handler_settings['target_bundles']['download'])) {
      $handler_settings['target_bundles']['download'] = 'download';
    }
    ksort($handler_settings['target_bundles']);
    $field->setSetting('handler_settings', $handler_settings);
    $field->save();
  }

  // Output logged messages to related channel of update execution.
  return $updater->logger()->output();
}

/**
 * Installs viewmode teaser_big.
 */
function openculturas_update_9306(): string {
  /** @var \Drupal\update_helper\Updater $updater */
  $updater = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updater->executeUpdate('openculturas', 'openculturas_update_9306');

  // Output logged messages to related channel of update execution.
  return $updater->logger()->output();
}
