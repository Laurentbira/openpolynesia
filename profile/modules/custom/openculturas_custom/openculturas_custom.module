<?php

declare(strict_types=1);

/**
 * @file
 * Primary module hooks for OpenCulturas Base module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_editor_js_settings_alter().
 *
 * Adds a .content class to the CKEditor body so CSS from frontend will work.
 */
function openculturas_custom_editor_js_settings_alter(array &$settings) {
  if (!empty($settings['editor']['formats'])) {
    foreach ($settings['editor']['formats'] as &$config) {
      if ($config['editor'] === 'ckeditor') {
        $config['editorSettings']['bodyClass'] = 'content';
      }
    }
  }
}

/**
 * Implements hook_theme().
 */
function openculturas_custom_theme() {
  return [
    'page_title_custom' => [
      'variables' => [
        'title' => NULL,
        'subtitle' => NULL,
        'profile_image' => NULL,
      ],
      'template' => 'page-title-custom',
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK() for leaflet-map.html.twig.
 */
function openculturas_custom_preprocess_leaflet_map(&$variables) {
  $variables['#attached']['library'][] = 'openculturas_custom/leaflet_extra';
}

/**
 * Implements hook_library_info_alter().
 */
function openculturas_custom_library_info_alter(&$libraries, $extension) {

  if ($extension === 'leaflet_markercluster') {
    /** @var \Drupal\Core\Asset\LibrariesDirectoryFileFinder $library_file_finder */
    $library_file_finder = \Drupal::service('library.libraries_directory_file_finder');
    $library = 'leaflet-markercluster';
    if (isset($libraries[$library])) {
      if (($path = $library_file_finder->find('leaflet.markercluster/dist/MarkerCluster.css'))) {
        $libraries[$library]['css']['component'] = ['/' . $path => []];
        unset($libraries[$library]['css']['component']['js/leaflet_markercluster/dist/MarkerCluster.css']);
      }
      if (($path = $library_file_finder->find('leaflet.markercluster/dist/MarkerCluster.Default.css'))) {
        $libraries[$library]['css']['component']['/' . $path] = [];
        unset($libraries[$library]['css']['component']['js/leaflet_markercluster/dist/MarkerCluster.Default.css']);
      }
      if (($path = $library_file_finder->find('leaflet.markercluster/dist/leaflet.markercluster.js'))) {
        $libraries[$library]['js']['/' . $path] = ['minified' => TRUE];
        unset($libraries[$library]['js']['js/leaflet_markercluster/dist/leaflet.markercluster.js']);
      }
    }
  }

  if ($extension !== 'leaflet') {
    return;
  }
  /** @var \Drupal\Core\Asset\LibrariesDirectoryFileFinder $library_file_finder */
  $library_file_finder = \Drupal::service('library.libraries_directory_file_finder');
  $library = 'leaflet';
  if (isset($libraries[$library])) {
    $libraries[$library]['js']['js/leaflet/dist/leaflet.js']['minified'] = TRUE;
  }

  $library = 'leaflet-geoman';
  if (isset($libraries[$library])) {
    $libraries[$library]['js']['js/leaflet-geoman-free/dist/leaflet-geoman.min.js']['minified'] = TRUE;
  }

  $library = 'leaflet.fullscreen';
  if (isset($libraries[$library])) {
    if (($path = $library_file_finder->find('leaflet.fullscreen/dist/leaflet.fullscreen.css'))) {
      $libraries[$library]['css']['component'] = ['/' . $path => []];
    }
    if (($path = $library_file_finder->find('leaflet.fullscreen/dist/Leaflet.fullscreen.min.js'))) {
      $libraries[$library]['js'] = ['/' . $path => ['minified' => TRUE]];
    }
  }

  $library = 'leaflet.gesture_handling';
  if (isset($libraries[$library])) {
    if (($path = $library_file_finder->find('leaflet.gesture-handling/dist/leaflet-gesture-handling.min.css'))) {
      $libraries[$library]['css']['component'] = ['/' . $path => ['minified' => TRUE]];
    }
    if (($path = $library_file_finder->find('leaflet.gesture-handling/dist/leaflet-gesture-handling.min.js'))) {
      $libraries[$library]['js'] = ['/' . $path => ['minified' => TRUE]];
    }
  }
}

/**
 * Implements hook_leaflet_map_view_style_alter().
 */
function openculturas_custom_leaflet_map_view_style_alter(array &$map_settings, \Drupal\leaflet_views\Plugin\views\style\LeafletMap $view_style) {
  $filters = $view_style->displayHandler->getHandlers('filter');

  /** @var \Drupal\geofield\Plugin\views\filter\GeofieldProximityFilter[]|null $proximityFilters */
  $proximityFilters = array_filter($filters, function ($filter) {
    return ($filter instanceof \Drupal\geofield\Plugin\views\filter\GeofieldProximityFilter);
  });
  if (count($proximityFilters) > 0) {
    $proximityFilter = reset($proximityFilters);
    $property = new ReflectionProperty($proximityFilter, 'sourcePlugin');
    $property->setAccessible(true);
    /** @var \Drupal\geofield\Plugin\GeofieldProximitySourceInterface $source_plugin */
    $source_plugin = $property->getValue($proximityFilter);
    $value = $proximityFilter->value;
    $origin = $source_plugin->getOrigin();
    if (!empty($origin['lat']) && !empty($origin['lon'])) {
      $origin_marker = $origin;
      $origin_marker['type'] = 'point';
      $origin_marker['label'] = t('Origin');
      $origin_marker['popup'] = \Drupal\views\Render\ViewsRenderPipelineMarkup::create(t('Origin'));
      $origin_marker['icon'] = [
        'iconType' => 'circle_marker',
        'options' => '{"radius":9,"color":"#fff","fillColor":"#2A93EE","fillOpacity":1,"opacity":1}',
      ];
      $map_settings['features'][] = $origin_marker;
      $map_settings['map']['settings']['center'] = array_merge($map_settings['map']['settings']['center'], $origin);
      $map_settings['map']['settings']['radius'] = $value['value'] ?? NULL;
      $map_settings['map']['settings']['map_position_force'] = TRUE;
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function openculturas_custom_flagging_insert(\Drupal\flag\FlaggingInterface $entity) {
  if ($entity->getFlagId() === 'recommendation_node') {
    /** @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cacheInvalidator */
    $cacheInvalidator = \Drupal::service('cache_tags.invalidator');
    $flagged_entity = $entity->getFlaggable();
    $cacheInvalidator->invalidateTags($flagged_entity->getCacheTagsToInvalidate());
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function openculturas_custom_flagging_update(\Drupal\flag\FlaggingInterface $entity) {
  if ($entity->getFlagId() === 'recommendation_node') {
    /** @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cacheInvalidator */
    $cacheInvalidator = \Drupal::service('cache_tags.invalidator');
    $flagged_entity = $entity->getFlaggable();
    $cacheInvalidator->invalidateTags($flagged_entity->getCacheTagsToInvalidate());
  }
}

/**
 * Implements hook_ENTITY_TYPE_prepare_form().
 */
function openculturas_custom_node_prepare_form(NodeInterface $node, $operation, FormStateInterface $form_state) {

  $is_data_entity = $node->bundle() === 'date' && $node->isNew();
  if ($is_data_entity && \Drupal::hasRequest() && ($request = \Drupal::request()) && $request->query->has('event_id')) {
    $event_id = $request->get('event_id');
    if (empty($event_id)) {
      return;
    }
    $event = Node::load($event_id);
    if (!$event instanceof NodeInterface) {
      return;
    }
    if ($event->bundle() !== 'event') {
      return;
    }
    $node->set('field_event_description', ['target_id' => $event->id()]);
    /** @var \Drupal\Core\Field\EntityReferenceFieldItemListInterface $source_data */
    $source_data = $event->get('field_people_reference');
    if ($source_data->isEmpty()) {
      return;
    }
    foreach ($source_data as $index => $ref) {
      /** @var \Drupal\paragraphs\ParagraphInterface $paragraph */
      $paragraph = clone $ref->entity;
      $node->get('field_people_reference')->set($index, $paragraph);
    }
  }
  $is_event_entity = $node->bundle() === 'event' && $node->isNew();

  if ($is_event_entity && \Drupal::hasRequest() && ($request = \Drupal::request()) && $request->query->has('member_id')) {
    $member_id = $request->get('member_id');
    if (empty($member_id)) {
      return;
    }
    $profile = Node::load($member_id);
    if (!$profile instanceof NodeInterface) {
      return;
    }
    if ($profile->bundle() !== 'profile') {
      return;
    }
    $p = Paragraph::create(['type' => 'member']);
    $p->set('field_member', ['target_id' => $member_id]);
    $node->set('field_people_reference', [$p]);
  }

}

/**
 * Implements hook_local_tasks_alter().
 */
function openculturas_custom_local_tasks_alter(&$local_tasks) {
  if (isset($local_tasks['entity.user.canonical'])) {
    $local_tasks['entity.user.canonical']['title'] = t('My Content');
    $local_tasks['entity.user.canonical']['weight'] = -3;
  }
  if (isset($local_tasks['entity.user.edit_form'])) {
    $local_tasks['entity.user.edit_form']['title'] = t('Account settings');
    $local_tasks['entity.user.edit_form']['weight'] = -2;
  }
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function openculturas_custom_node_view_alter(array &$build, NodeInterface $entity) {
  if ($build['#view_mode'] === 'full' && isset($build['field_forfree'])) {
    // Not for free then there should be a price and hide this field output.
    $build['field_forfree']['#access'] = (bool) $entity->get('field_forfree')->value;
  }
  if ($entity->bundle() === 'date' && $build['#view_mode'] === 'full') {
    $build['field_location']['#title'] = t("Visit the location's profile");
    $build['field_event_description']['#title'] = t('See all about');
    if ((\Drupal::hasRequest() && $request = \Drupal::request()) && $request->query->has('date_delta') && $entity->hasField('field_date')) {
      $delta = $request->get('date_delta');
      $cloned_entity = clone $entity;
      /** @var \Drupal\smart_date\Plugin\Field\FieldType\SmartDateFieldItemList $field */
      $field = $cloned_entity->get('field_date');

      /** @var \Drupal\smart_date\Plugin\Field\FieldType\SmartDateItem $delta_item */
      $delta_item = $field->get($delta);
      if ($delta_item instanceof \Drupal\smart_date\Plugin\Field\FieldType\SmartDateItem) {
        $field->setValue(array_slice($field->getValue(), (int) $delta));

        $display_settings = \Drupal::service('entity_display.repository')->getViewDisplay(
          'node',
          'date',
          'full'
        )->getComponent('field_date');
        $build['field_date'] = $field->view($display_settings);
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function openculturas_custom_form_node_form_alter(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\node\NodeForm $node_form */
  $node_form = $form_state->getFormObject();
  /** @var \Drupal\node\NodeInterface $node */
  $node = $node_form->getEntity();
  if ($node->bundle() === 'event') {
    \Drupal::request()->query->remove('destination');
    $form['#submit'][] = 'openculturas_custom_event_submit_handler';
    $form['actions']['openculturas_custom_event_submit'] = $form['actions']['submit'];
    $form['actions']['openculturas_custom_event_submit']['#value'] = t('Save and add date');
    $form['actions']['openculturas_custom_event_submit']['#button_type'] = 'secondary';
    $form['actions']['openculturas_custom_event_submit']['#submit'][] = 'openculturas_custom_event_submit_handler';
  }
}

/**
 * Submit handler to redirect the user to the date add form with the event id as parameter.
 *
 * @see openculturas_custom_form_node_form_alter
 * @see openculturas_custom_node_prepare_form
 */
function openculturas_custom_event_submit_handler(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\node\NodeForm $node_form */
  $node_form = $form_state->getFormObject();
  /** @var \Drupal\node\NodeInterface $node */
  $node = $node_form->getEntity();
  $form_state->setRedirectUrl(Url::fromRoute('node.add', ['node_type' => 'date'], ['query' => ['event_id' => $node->id()]]));
}

/**
 * Implements hook_views_pre_render().
 */
function openculturas_custom_views_pre_render(ViewExecutable $view) {
  // Only doing this for media library widget view.
  // Background: https://www.drupal.org/project/drupal/issues/3283692#comment-14544647
  if ($view->id() === 'media_library') {
    $current_user = \Drupal::currentUser();
    $result = [];

    // Display only media authored by the current user or can edit.
    foreach ($view->result as $key => $row) {
      /** @var \Drupal\media\MediaInterface $entity */
      $entity = $row->_entity;
      if ($entity->getOwnerId() == $current_user->id() || $entity->access('edit')) {
        $result[$key] = $row;
      }
    }
    $view->result = $result;
  }
}

/**
 * Implements hook_flag_action_access().
 */
function openculturas_custom_flag_action_access(string $action, \Drupal\flag\FlagInterface $flag, \Drupal\Core\Session\AccountInterface $account, \Drupal\Core\Entity\EntityInterface $flaggable = NULL) {
  if ($account->isAnonymous()) {
    return \Drupal\Core\Access\AccessResult::neutral();
  }
  /** @var NodeInterface $entity */
  $entity = $flaggable;
  if ($flag->id() === 'claim_ownership' && $entity->hasField('field_allow_claiming')) {
    $allowed = (bool) $entity->get('field_allow_claiming')->value;
    if (!$allowed) {
      return \Drupal\Core\Access\AccessResult::forbidden();
    }
  }

  return \Drupal\Core\Access\AccessResult::neutral();
}

/**
 * Implements hook_locale_translation_projects_alter().
 */
function openculturas_custom_locale_translation_projects_alter(&$projects) {
  /** @var \Drupal\Core\Extension\ModuleHandlerInterface $module_handler */
  $module_handler = \Drupal::service('module_handler');
  $projects['openculturas_custom'] = [
    'info' => [
      'name' => 'OpenCulturas Customizing',
      'interface translation server pattern' => $module_handler->getModule('openculturas_custom')->getPath() . '/translations/%language.po'
    ],
  ];
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function openculturas_custom_node_presave(NodeInterface $node) {
  $tags = [];
  // Invalidate cache for CT profile -> Magazine -> Mention by
  if ($node->hasField('field_references')) {
    $refs = $node->get('field_references')->getValue();
    foreach ($refs as $ref) {
      $tags[] = 'node:' . $ref['target_id'];
    }
  }
  // If the field changes, also invalidate the original value
  if (isset($node->original) && $node->original->hasField('field_references')) {
    $refs = $node->get('field_references')->getValue();
    foreach ($refs as $ref) {
      $tags[] = 'node:' . $ref['target_id'];
    }
  }
  if ($tags !== []) {
    \Drupal\Core\Cache\Cache::invalidateTags(array_unique($tags));
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function openculturas_custom_module_implements_alter(&$implementations, $hook) {
  if ($hook === 'views_plugins_filter_alter') {
    $group = $implementations['openculturas_custom'];
    unset($implementations['openculturas_custom']);
    $implementations['openculturas_custom'] = $group;
  }
}

/**
 * Implements hook_views_plugins_filter_alter().
 */
function openculturas_custom_views_plugins_filter_alter(array &$plugins) {
  $plugins['date']['class'] = \Drupal\openculturas_custom\Plugin\views\filter\Date::class;
  $plugins['date']['provider'] = 'openculturas_custom';
}
