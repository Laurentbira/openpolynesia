<?php

declare(strict_types=1);

/**
 * @file
 * Primary module hooks for OpenCulturas Base module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;

/**
 * Implements hook_editor_js_settings_alter().
 *
 * Adds a .content class to the CKEditor body so CSS from frontend will work.
 */
function openculturas_custom_editor_js_settings_alter(array &$settings) {
  if (!empty($settings['editor']['formats'])) {
    foreach ($settings['editor']['formats'] as &$config) {
      if ($config['editor'] === 'ckeditor') {
        $config['editorSettings']['bodyClass'] = 'content';
      }
    }
  }
}

/**
 * Implements hook_theme().
 */
function openculturas_custom_theme() {
  return [
    'page_title_custom' => [
      'variables' => [
        'title' => NULL,
        'subtitle' => NULL,
        'profile_image' => NULL,
      ],
      'template' => 'page-title-custom',
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK() for leaflet-map.html.twig.
 */
function openculturas_custom_preprocess_leaflet_map(&$variables) {
  $variables['#attached']['library'][] = 'openculturas_custom/leaflet_extra';
}

/**
 * Implements hook_library_info_alter().
 */
function openculturas_custom_library_info_alter(&$libraries, $extension) {

  if ($extension === 'leaflet_markercluster') {
    /** @var \Drupal\Core\Asset\LibrariesDirectoryFileFinder $library_file_finder */
    $library_file_finder = \Drupal::service('library.libraries_directory_file_finder');
    $library = 'leaflet-markercluster';
    if (isset($libraries[$library])) {
      if (($path = $library_file_finder->find('leaflet.markercluster/dist/MarkerCluster.css'))) {
        $libraries[$library]['css']['component'] = ['/' . $path => []];
        unset($libraries[$library]['css']['component']['js/leaflet_markercluster/dist/MarkerCluster.css']);
      }
      if (($path = $library_file_finder->find('leaflet.markercluster/dist/MarkerCluster.Default.css'))) {
        $libraries[$library]['css']['component']['/' . $path] = [];
        unset($libraries[$library]['css']['component']['js/leaflet_markercluster/dist/MarkerCluster.Default.css']);
      }
      if (($path = $library_file_finder->find('leaflet.markercluster/dist/leaflet.markercluster.js'))) {
        $libraries[$library]['js']['/' . $path] = ['minified' => TRUE];
        unset($libraries[$library]['js']['js/leaflet_markercluster/dist/leaflet.markercluster.js']);
      }
    }
  }

  if ($extension !== 'leaflet') {
    return;
  }
  /** @var \Drupal\Core\Asset\LibrariesDirectoryFileFinder $library_file_finder */
  $library_file_finder = \Drupal::service('library.libraries_directory_file_finder');
  $library = 'leaflet';
  if (isset($libraries[$library])) {
    if (($path = $library_file_finder->find('leaflet/dist/leaflet.js'))) {
      $libraries[$library]['js'] = ['/' . $path => ['minified' => TRUE]];
      if (\preg_match_all('/Leaflet ([0-9].[0-9].[0-9])/',
        file_get_contents($path), $matches)) {
        $libraries[$library]['version'] = $matches[1][0] ?? NULL;
      }
      $path = $library_file_finder->find('leaflet/dist/leaflet.css');
      $libraries[$library]['css']['component'] = ['/' . $path => []];
    }
  }

  $library = 'leaflet-geoman';
  if (isset($libraries[$library])) {
    if (($path = $library_file_finder->find('leaflet.geoman/css/leaflet-geoman.css'))) {
      $libraries[$library]['css']['theme'] = ['/' . $path => []];
    }
    if (($path = $library_file_finder->find('leaflet.geoman/js/leaflet-geoman.min.js'))) {
      $libraries[$library]['js'] = ['/' . $path => ['minified' => TRUE]];
    }
  }

  $library = 'leaflet.fullscreen';
  if (isset($libraries[$library])) {
    if (($path = $library_file_finder->find('leaflet.fullscreen/dist/leaflet.fullscreen.css'))) {
      $libraries[$library]['css']['component'] = ['/' . $path => []];
    }
    if (($path = $library_file_finder->find('leaflet.fullscreen/dist/Leaflet.fullscreen.min.js'))) {
      $libraries[$library]['js'] = ['/' . $path => ['minified' => TRUE]];
    }
  }

  $library = 'leaflet.gesture_handling';
  if (isset($libraries[$library])) {
    if (($path = $library_file_finder->find('leaflet.gesture-handling/dist/leaflet-gesture-handling.min.css'))) {
      $libraries[$library]['css']['component'] = ['/' . $path => ['minified' => TRUE]];
    }
    if (($path = $library_file_finder->find('leaflet.gesture-handling/dist/leaflet-gesture-handling.min.js'))) {
      $libraries[$library]['js'] = ['/' . $path => ['minified' => TRUE]];
    }
  }
}

/**
 * Implements hook_leaflet_map_view_style_alter().
 */
function openculturas_custom_leaflet_map_view_style_alter(array &$map_settings, \Drupal\leaflet_views\Plugin\views\style\LeafletMap $view_style) {
  $filters = $view_style->displayHandler->getHandlers('filter');

  /** @var \Drupal\geofield\Plugin\views\filter\GeofieldProximityFilter[]|null $proximityFilters */
  $proximityFilters = array_filter($filters, function ($filter) {
    return ($filter instanceof \Drupal\geofield\Plugin\views\filter\GeofieldProximityFilter);
  });
  if (count($proximityFilters) > 0) {
    $proximityFilter = reset($proximityFilters);
    $property = new ReflectionProperty($proximityFilter, 'sourcePlugin');
    $property->setAccessible(true);
    /** @var \Drupal\geofield\Plugin\GeofieldProximitySourceInterface $source_plugin */
    $source_plugin = $property->getValue($proximityFilter);
    $value = $proximityFilter->value;
    $origin = $source_plugin->getOrigin();
    if (!empty($origin['lat']) && !empty($origin['lon'])) {
      $origin_marker = $origin;
      $origin_marker['type'] = 'point';
      $origin_marker['label'] = t('Origin');
      $origin_marker['popup'] = \Drupal\views\Render\ViewsRenderPipelineMarkup::create(t('Origin'));
      $origin_marker['icon'] = [
        'iconType' => 'circle_marker',
        'options' => '{"radius":9,"color":"#fff","fillColor":"#2A93EE","fillOpacity":1,"opacity":1}',
      ];
      $map_settings['features'][] = $origin_marker;
      $map_settings['map']['settings']['center'] = array_merge($map_settings['map']['settings']['center'], $origin);
      $map_settings['map']['settings']['radius'] = $value['value'] ?? NULL;
      $map_settings['map']['settings']['map_position_force'] = TRUE;
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function openculturas_custom_flagging_insert(\Drupal\flag\FlaggingInterface $entity) {
  if ($entity->getFlagId() === 'recommendation_node') {
    /** @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cacheInvalidator */
    $cacheInvalidator = \Drupal::service('cache_tags.invalidator');
    $flagged_entity = $entity->getFlaggable();
    $cacheInvalidator->invalidateTags($flagged_entity->getCacheTagsToInvalidate());
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function openculturas_custom_flagging_update(\Drupal\flag\FlaggingInterface $entity) {
  if ($entity->getFlagId() === 'recommendation_node') {
    /** @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cacheInvalidator */
    $cacheInvalidator = \Drupal::service('cache_tags.invalidator');
    $flagged_entity = $entity->getFlaggable();
    $cacheInvalidator->invalidateTags($flagged_entity->getCacheTagsToInvalidate());
  }
}

/**
 * Implements hook_entity_prepare_form().
 */
function openculturas_custom_entity_prepare_form(EntityInterface $date_entity, $operation, FormStateInterface $form_state) {
  if (!$date_entity instanceof NodeInterface) {
    return;
  }
  if ($date_entity->bundle() !== 'date' || !$date_entity->isNew()) {
    return;
  }
  if (\Drupal::hasRequest() && ($request = \Drupal::request()) && $request->query->has('event_id')) {
    $event_id = $request->get('event_id');
    if (empty($event_id)) {
      return;
    }
    $event = Node::load($event_id);
    if (!$event instanceof NodeInterface) {
      return;
    }
    if ($event->bundle() !== 'event') {
      return;
    }
    $date_entity->set('field_event_description', ['target_id' => $event->id()]);
    /** @var \Drupal\Core\Field\EntityReferenceFieldItemListInterface $source_data */
    $source_data = $event->get('field_people_reference');
    if ($source_data->isEmpty()) {
      return;
    }
    foreach ($source_data as $index => $ref) {
      /** @var \Drupal\paragraphs\ParagraphInterface $paragraph */
      $paragraph = clone $ref->entity;
      $date_entity->get('field_people_reference')->set($index, $paragraph);
    }
  }
}

/**
 * Implements hook_local_tasks_alter().
 */
function openculturas_custom_local_tasks_alter(&$local_tasks) {
  if (isset($local_tasks['entity.user.canonical'])) {
    $local_tasks['entity.user.canonical']['title'] = t('My Content');
    $local_tasks['entity.user.canonical']['weight'] = -3;
  }
  if (isset($local_tasks['entity.user.edit_form'])) {
    $local_tasks['entity.user.edit_form']['title'] = t('Account settings');
    $local_tasks['entity.user.edit_form']['weight'] = -2;
  }
}
